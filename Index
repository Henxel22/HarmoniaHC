<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Harmonia</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #202123;
      color: #dcdcdc;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
    }
    .container {
      width: 90%;
      max-width: 800px;
      margin: 20px auto;
      padding: 20px;
      background: #3c3f41;
      border-radius: 8px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    }
    h1 {
      text-align: center;
      font-size: 1.8em;
    }
    label, select, input, button {
      display: block;
      width: 100%;
      margin-bottom: 15px;
      padding: 8px;
      border-radius: 4px;
      border: none;
      font-size: 0.9em;
    }
    select, input {
      background-color: #292b2d;
      color: #ffffff;
    }
    button {
      background: #ffffff;
      color: #202123;
      cursor: pointer;
    }
    button:hover {
      background: #f4f4f4;
    }
    table {
      width: 100%;
      margin-top: 20px;
      border-collapse: collapse;
      background-color: #292b2d;
      font-size: 0.9em;
    }
    th, td {
      border: 1px solid #3c3f41;
      text-align: center;
      padding: 8px;
    }
    th {
      background-color: #ffffff;
      color: #202123;
    }
    @media (max-width: 600px) {
      .container {
        padding: 15px;
      }
      label, select, input, button {
        font-size: 0.9em;
        padding: 8px;
      }
      h1 {
        font-size: 1.5em;
      }
      table {
        font-size: 0.8em;
      }
    }
    #fade-container {
      opacity: 0;
      transition: opacity 1.5s ease-in-out;
    }
    /* Nuevo estilo para el mensaje de confirmaci√≥n */
    #confirmation-message {
      position: fixed;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      background-color: #4CAF50; /* verde */
      color: white;
      padding: 10px 20px;
      border-radius: 4px;
      display: none;
      font-weight: bold;
    }
  </style>
</head>
<body onload="fadeInContent()">
  <div id="fade-container">
    <div class="container">
      <p style="text-align: center; font-size: 0.9em; color: #bbb; margin-bottom: 20px;">
        Fill in your work details (start time, end time, hourly rate, etc.), click "Calculate", and view your total pay and hours below.
      </p>
      <h1><i class="fas fa-clock"></i> Harmonia</h1>

      <button onclick="setToday()" style="background: #ffffff; color: #202123;">Set Today's Date</button>
      <label>Preset: <span>‚öôÔ∏è</span></label>
      <select id="preset" onchange="applyPreset()">
        <option value="custom">Custom</option>
        <option value="heathrow-weekdays">Heathrow Couriers Weekdays</option>
        <option value="heathrow-weekends">Heathrow Couriers Weekends</option>
      </select>

      <label>Day: <span>üóìÔ∏è</span></label>
      <input type="number" id="day">

      <label>Start Time: <span>‚è∞</span></label>
      <input type="time" id="start-time">

      <label>End Time: <span>‚è±Ô∏è</span></label>
      <input type="time" id="end-time">

      <label>Hourly Rate (¬£): <span>üíµ</span></label>
      <input type="number" id="hourly-rate">

      <label>Overtime Rate (¬£): <span>üí∞</span></label>
      <input type="number" id="overtime-rate">
      
      <label>Regular Hours Limit: <span>‚è≥</span></label>
      <input type="number" id="regular-hours-limit" value="8">

      <button onclick="calculateSalary()">Calculate</button>
      <p id="live-preview" style="margin-top: 10px; font-size: 0.9em; color: #bbb;"></p>
      <!-- Se elimin√≥ la duplicaci√≥n de live-preview -->
      <div id="result"></div>

      <table id="history">
        <thead>
          <tr>
            <th>Date</th>
            <th>Worked Hours</th>
            <th>Overtime</th>
            <th>Total Pay (¬£)</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="history-body"></tbody>
      </table>
      <div id="totals" style="margin-top: 20px; text-align: center;">
        <p>Total Regular Hours: <strong><span id="total-regular-hours">0</span></strong> hrs</p>
        <p>Total Worked Hours: <strong><span id="total-worked-hours">0</span></strong> hrs</p>
        <p>Total Overtime Hours: <strong><span id="total-overtime-hours">0</span></strong> hrs</p>
        <p>Total Pay: <strong>¬£<span id="total-pay">0.00</span></strong></p>
      </div>

      <div style="text-align: center; margin-top: 20px;">
        <button onclick="clearTable()" style="margin-right: 10px;">Clear Table</button>
        <button onclick="restoreTable()">Return</button>
      </div>
    </div>
  </div>

  <!-- Nuevo mensaje de confirmaci√≥n -->
  <div id="confirmation-message"></div>

  <script>
    let history = JSON.parse(localStorage.getItem('workHistory')) || [];
    let previousHistory = []; // Variable para almacenar el historial anterior

    function saveHistory() {
      localStorage.setItem('workHistory', JSON.stringify(history));
    }

    function applyPreset() {
      const preset = document.getElementById('preset').value;
      if (preset === 'heathrow-weekdays') {
        document.getElementById('regular-hours-limit').value = 8;
        document.getElementById('hourly-rate').value = 11.5;
        document.getElementById('overtime-rate').value = 17.25;
      } else if (preset === 'heathrow-weekends') {
        document.getElementById('regular-hours-limit').value = 0;
        document.getElementById('hourly-rate').value = 17.25;
        document.getElementById('overtime-rate').value = 17.25;
      } else {
        document.getElementById('hourly-rate').value = '';
        document.getElementById('overtime-rate').value = '';
      }
    }

    function setToday() {
      const today = new Date();
      document.getElementById('day').value = today.getDate();
    }

    function calculateSalary() {
      updateLivePreview();
      // Recoger los valores de los inputs
      const startTime = document.getElementById('start-time').value;
      const endTime = document.getElementById('end-time').value;
      const hourlyRate = parseFloat(document.getElementById('hourly-rate').value);
      const overtimeRate = parseFloat(document.getElementById('overtime-rate').value);

      if (!startTime || !endTime || isNaN(hourlyRate) || isNaN(overtimeRate)) {
        return alert('Invalid input');
      }

      const start = new Date(`1970-01-01T${startTime}`);
      const end = new Date(`1970-01-01T${endTime}`);

      if (end <= start) {
        return alert('End time must be after start time.');
      }

      const workedHours = (end - start) / (1000 * 60 * 60);
      const regularHoursLimit = isNaN(parseFloat(document.getElementById('regular-hours-limit').value)) ? 0 : parseFloat(document.getElementById('regular-hours-limit').value);
      const regularHours = Math.min(workedHours, regularHoursLimit);
      const overtimeHours = Math.max(0, workedHours - regularHoursLimit);
      const totalPay = (regularHours * hourlyRate) + (overtimeHours * overtimeRate);

      history.push({
        day: document.getElementById('day').value,
        workedHours: workedHours.toFixed(2),
        overtime: overtimeHours.toFixed(2),
        totalPay: totalPay.toFixed(2)
      });

      saveHistory();
      updateHistory();
      showConfirmationMessage();  // Muestra el mensaje de confirmaci√≥n
    }

    function updateHistory() {
      const tbody = document.querySelector('#history tbody');
      let totalWorked = 0, totalOvertime = 0, totalRegular = 0, totalPay = 0;

      history.sort((a, b) => parseInt(a.day) - parseInt(b.day));
      history.forEach(row => {
        totalWorked += parseFloat(row.workedHours);
        totalOvertime += parseFloat(row.overtime);
        totalRegular += parseFloat(row.workedHours) - parseFloat(row.overtime);
        totalPay += parseFloat(row.totalPay);
      });
      tbody.innerHTML = history.map((row, index) => {
        return `
          <tr>
            <td>${getFormattedDate(row.day)}</td>
            <td>${row.workedHours}</td>
            <td>${row.overtime}</td>
            <td>¬£${row.totalPay}</td>
            <td><button onclick="deleteEntry(${index})">‚ùå</button></td>
          </tr>`;
      }).join('');

      document.getElementById('total-regular-hours').textContent = totalRegular.toFixed(2);
      document.getElementById('total-worked-hours').textContent = totalWorked.toFixed(2);
      document.getElementById('total-overtime-hours').textContent = totalOvertime.toFixed(2);
      document.getElementById('total-pay').textContent = totalPay.toFixed(2);
    }

    function clearTable() {
      previousHistory = [...history]; // Copia el historial actual
      localStorage.removeItem('workHistory');
      history.length = 0; // Vac√≠a el historial en memoria
      updateHistory();
      alert('Table cleared. Use "Return" to restore.');
    }

    function restoreTable() {
      if (previousHistory.length > 0) {
        history = [...previousHistory]; // Restaura el historial guardado
        localStorage.setItem('workHistory', JSON.stringify(history));
        previousHistory = []; // Limpia la copia temporal
        updateHistory();
        alert('Table restored to previous state.');
      } else {
        alert('No previous data to restore.');
      }
    }

    // Carga el historial al iniciar la p√°gina
    updateHistory();

    function deleteEntry(index) {
      history.splice(index, 1);
      saveHistory();
      updateHistory();
    }

    function getFormattedDate(day) {
      const today = new Date();
      today.setDate(day);
      const options = { weekday: 'long', day: '2-digit', month: '2-digit', year: 'numeric' };
      return today.toLocaleDateString('en-GB', options);
    }

    function updateLivePreview() {
      const startTime = document.getElementById('start-time').value;
      const endTime = document.getElementById('end-time').value;
      const hourlyRate = parseFloat(document.getElementById('hourly-rate').value);
      const overtimeRate = parseFloat(document.getElementById('overtime-rate').value);
      const regularHoursLimit = isNaN(parseFloat(document.getElementById('regular-hours-limit').value)) ? 0 : parseFloat(document.getElementById('regular-hours-limit').value);
      
      if (!startTime || !endTime || isNaN(hourlyRate) || isNaN(overtimeRate)) {
        document.getElementById('live-preview').textContent = "Enter valid inputs to preview the calculation.";
        return;
      }
      
      const start = new Date(`1970-01-01T${startTime}`);
      const end = new Date(`1970-01-01T${endTime}`);
      if (end <= start) {
        document.getElementById('live-preview').textContent = "End time must be after start time.";
        return;
      }
      
      const workedHours = (end - start) / (1000 * 60 * 60);
      const regularHours = Math.min(workedHours, regularHoursLimit);
      const overtimeHours = Math.max(0, workedHours - regularHoursLimit);
      const totalPay = (regularHours * hourlyRate) + (overtimeHours * overtimeRate);
      
      document.getElementById('live-preview').textContent = `Worked: ${workedHours.toFixed(2)} hrs | Overtime: ${overtimeHours.toFixed(2)} hrs | Total Pay: ¬£${totalPay.toFixed(2)}`;
    }

    function fadeInContent() {
      document.getElementById('fade-container').style.opacity = 1;
    }

    // Funci√≥n para mostrar el mensaje de confirmaci√≥n en verde
    function showConfirmationMessage() {
      const messageEl = document.getElementById('confirmation-message');
      messageEl.textContent = 'Informaci√≥n a√±adida con √©xito!';
      messageEl.style.display = 'block';
      setTimeout(() => {
        messageEl.style.display = 'none';
      }, 2000);
    }
  </script>
</body>
</html>
